name: Fortify DAST Scan
on:
  workflow_dispatch:  
  push:
    # Master or main branch that you want to trigger this workflow for
    branches: [7.0-gh-fortify]

jobs:
  Fortify-DAST:
    # Use the appropriate runner for building your source code
    runs-on: ubuntu-latest
    container:
      image: fortifydocker/fortify-ci-tools
    env:
      FTFY_SSC_URL: ${{ secrets.FTFY_SSC_URL }}
      FTFY_CI_TOKEN_ENC: ${{ secrets.FTFY_CI_TOKEN_ENC }}
      APPLICATION: "${{ github.event.repository.name }}"
      SHA: "${{ github.run_id }}"
      VERSION: "${{ github.ref_name }}"
      # Choose one of the two following (default: BASE_SETTINGS)
      BASE_SETTINGS: "BodgeIt[Std][Auth][SVC]"
      SCDAST_SETTINGS: ""
      # 
      WAIT: true
      DELETE_SETTINGS: true
      
    steps:
      # Login
      - name: Login to Fortify
        run: |
          fcli ssc session login --url $FTFY_SSC_URL -t $FTFY_CI_TOKEN_ENC
          fcli sc-dast session login --ssc-url $FTFY_SSC_URL --ssc-ci-token $FTFY_CI_TOKEN_ENC

      # Create Application Version
      - name: Create Application Version
        run: |
          fcli ssc appversion create $APPLICATION:$VERSION --auto-required-attrs --skip-if-exists

      # Create Scan Settings from Base Settings
      - name : Create Settings from Base Settings
        if: ${{ env.BASE_SETTINGS }}
        run: |
          # Fetch Base Scan Settings
          basescansettingsid=$(fcli sc-dast rest call /api/v2/base-scan-settings/scan-settings-summary-list?searchText="$BASE_SETTINGS" -o expr={items[0].id})
        
          if [ -z "$basescansettingsid" ]
          then
                echo "No Base Scan Settings $BASE_SETTINGS found"
                exit 1
          else
                applicationversionid=$(fcli ssc appversion get ${APPLICATION}:${VERSION} -o expr={id})
                uri="/api/v2/application-versions/${applicationversionid}/base-scan-settings/${basescansettingsid}"
                basescansettings=$(fcli sc-dast rest call $uri --store basescansettings)
                scansettings=$(echo $basescansettings | awk '{print substr($0, 4, length($0) - 6)}')
                scansettingsname=${APPLICATION}-${VERSION}-${SHA}
                body="{$scansettings,\"applicationVersionId\": \"${applicationversionid}\",\"name\": \"$scansettingsname\",\"scanType\": 1 }"
                echo $body
                # Create Scan Settings
                cicdToken=$(fcli sc-dast rest call /api/v2/application-version-scan-settings -d "$body" -X POST  -o expr={cicdToken} --store scansettings)
      
                # Set SCDAST_SETTINGS env variable for whole job
                echo "SCDAST_SETTINGS=$(echo $cicdToken)" >> $GITHUB_ENV

                echo "Scan Settings created : $scansettingsname ($cicdToken)"
          fi
          


      # Run DAST Scan
      - name: Run DAST Scan
        run: fcli sc-dast scan start --settings=$SCDAST_SETTINGS --store dastscan "$APPLICATION-$VERSION-$SHA"

      # Wait for DAST scan to complete
      - name: Wait for DAST Scan Completion
        if: ${{ env.WAIT == 'true' }}
        run: fcli sc-dast scan wait-for -u=Complete '{?dastscan:id}'  -i 30s

      # Cleanup Scan Settings made from Base Settings
      - name : Delete Settings from Base Settings
        if: ${{ env.BASE_SETTINGS && env.DELETE_SETTINGS == 'true' }}
        continue-on-error: true
        run: |
          res=$(fcli sc-dast rest call /api/v2/application-version-scan-settings/$(fcli config var contents get scansettings -o expr={id}) -X DELETE) || true

          echo "Scan Settings $SCDAST_SETTINGS deleted"

      # Clean up tokens, session variables, ...
      - name: Cleanup
        run: |
          fcli sc-dast session logout --no-revoke-token
          fcli ssc session logout --no-revoke-token
